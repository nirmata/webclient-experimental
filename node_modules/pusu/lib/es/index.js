/**
 * Logs the action and its relative information.
 *
 * @param {TCreateConfiguration} config - Configuration options provided at the time of creating the publication.
 * @param {TLogAction} action - Action: "create" | "publish" | "subscribe" | "unsubscribe" | "notify"
 * @param {TData} data - Data sent to subscribers.
 * @param {TMetaData} meta - Can be any metadata. E.g. when a subscriber is notified then the sibscriber function's name is added in the metadata. */
var log = function (config, action, data, meta) {
    var _a;
    if (config === null || config === void 0 ? void 0 : config.enableLogging) {
        var info = { publication: (_a = config.name) !== null && _a !== void 0 ? _a : "Unknown", action: action };
        if (data) {
            info.data = data;
        }
        if (meta) {
            info.meta = meta;
        }
        console.log("pusu", info);
    }
};
/**
 * Creates a new publication.
 *
 * @param {TCreateConfiguration} config - Configuration options to be provided to the publication being created.
 * @returns {TPublication} Publication.
 */
export var createPublication = function (config) {
    var publication = {
        config: config,
        subscribers: [],
    };
    log(config, "create", undefined);
    return publication;
};
/**
 * Publishes the data to all subscribers.
 *
 * @param {TPublication} publication - Publication object.
 * @param {T} data - Data to publish and to be sent to all subscribers.
 */
export var publish = function (publication, data) {
    log(publication.config, "publish", data, undefined);
    for (var _i = 0, _a = publication.subscribers; _i < _a.length; _i++) {
        var subscriber = _a[_i];
        log(publication.config, "notify", data, {
            subscriber: subscriber.name,
        });
        subscriber(data);
    }
};
/**
 * Subscribes to the publication.
 *
 * @param {TPublication} publication - Publication object.
 * @param {TSubscriber} subscriber - A subscriber function to be called each time the data is published.
 *
 * @returns {function} A function to ubsubscribe the subscriber from the publication.
 */
export var subscribe = function (publication, subscriber) {
    log(publication.config, "subscribe", undefined, {
        subscriber: subscriber.name,
    });
    var subscribers = publication.subscribers;
    subscribers.push(subscriber);
    return function unsubscribe() {
        log(publication.config, "unsubscribe", undefined, {
            subscriber: subscriber.name,
        });
        var index = subscribers.indexOf(subscriber);
        if (index > -1) {
            subscribers.splice(index, 1);
        }
    };
};
//# sourceMappingURL=index.js.map