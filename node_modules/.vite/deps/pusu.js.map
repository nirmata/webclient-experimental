{
  "version": 3,
  "sources": ["../../pusu/src/index.ts"],
  "sourcesContent": ["/**\n * A subscriber function to be called each time the data is published.\n *\n * @param {T} data - The data sent by the publisher.\n */\nexport type TSubscriber<T> = (data: T) => void;\n\n/**\n * Configuration options to be provided to the publication being created.\n *\n * @property {string} name - Used in logging. Default: \"Unknown\".\n * @property {boolean} enableLogging - Enable/disable console logging. Useful in development and/or test environments. If enabled then each action \"create\" | \"publish\" | \"subscribe\" | \"unsubscribe\" | \"notify\" gets logged on console with relevent data.\n */\nexport type TCreateConfiguration = {\n  name?: string;\n  enableLogging?: boolean;\n};\n\n/**\n * Publication object.\n *\n * @property {TCreateConfiguration} config - Configuration options provided at the time of creating the publication.\n * @property {TSubscriber[]} subscribers - Collection of subscriber functions currently subscribed to the publication.\n */\nexport type TPublication<T> = {\n  config?: TCreateConfiguration;\n  subscribers: TSubscriber<T>[];\n};\n\n/**\n * Action to log.\n */\nexport type TLogAction =\n  /** When publication is created. */\n  | \"create\"\n  /** When publciation is published with data. */\n  | \"publish\"\n  /** When a subscriber function is subscribed. */\n  | \"subscribe\"\n  /** When a subscriber function is unsubscribed. */\n  | \"unsubscribe\"\n  /** When a subscriber function is called with the data. */\n  | \"notify\";\n\n/**\n * Information to log.\n *\n * @property {string} publication - Name of the publication. Default: 'Unknown'\n * @property {TLogAction} action - Action.\n * @property {T} data - Data published and sent to the subscribers.\n * @property {any} - Any metadata. E.g. when a subscriber is notified then the sibscriber function's name is added in the metadata.\n */\nexport type TLog<T> = {\n  publication: string;\n  action: TLogAction;\n  data?: T;\n  meta?: any;\n};\n\n/**\n * Logs the action and its relative information.\n *\n * @param {TCreateConfiguration} config - Configuration options provided at the time of creating the publication.\n * @param {TLogAction} action - Action: \"create\" | \"publish\" | \"subscribe\" | \"unsubscribe\" | \"notify\"\n * @param {TData} data - Data sent to subscribers.\n * @param {TMetaData} meta - Can be any metadata. E.g. when a subscriber is notified then the sibscriber function's name is added in the metadata. */\nconst log = <TData, TMetaData>(\n  config: TCreateConfiguration | undefined,\n  action: TLogAction,\n  data?: TData,\n  meta?: TMetaData\n) => {\n  if (config?.enableLogging) {\n    const info: TLog<TData> = { publication: config.name ?? \"Unknown\", action };\n\n    if (data) {\n      info.data = data;\n    }\n\n    if (meta) {\n      info.meta = meta;\n    }\n\n    console.log(\"pusu\", info);\n  }\n};\n\n/**\n * Creates a new publication.\n *\n * @param {TCreateConfiguration} config - Configuration options to be provided to the publication being created.\n * @returns {TPublication} Publication.\n */\nexport const createPublication = <T>(\n  config?: TCreateConfiguration\n): TPublication<T> => {\n  const publication: TPublication<T> = {\n    config,\n    subscribers: [],\n  };\n\n  log(config, \"create\", undefined);\n\n  return publication;\n};\n\n/**\n * Publishes the data to all subscribers.\n *\n * @param {TPublication} publication - Publication object.\n * @param {T} data - Data to publish and to be sent to all subscribers.\n */\nexport const publish = <T>(publication: TPublication<T>, data: T): void => {\n  log<T, undefined>(publication.config, \"publish\", data, undefined);\n\n  for (const subscriber of publication.subscribers) {\n    log<T, { subscriber: string }>(publication.config, \"notify\", data, {\n      subscriber: subscriber.name,\n    });\n\n    subscriber(data);\n  }\n};\n\n/**\n * Subscribes to the publication.\n *\n * @param {TPublication} publication - Publication object.\n * @param {TSubscriber} subscriber - A subscriber function to be called each time the data is published.\n *\n * @returns {function} A function to ubsubscribe the subscriber from the publication.\n */\nexport const subscribe = <T>(\n  publication: TPublication<T>,\n  subscriber: TSubscriber<T>\n): (() => void) => {\n  log<undefined, { subscriber: string }>(\n    publication.config,\n    \"subscribe\",\n    undefined,\n    {\n      subscriber: subscriber.name,\n    }\n  );\n\n  const { subscribers } = publication;\n\n  subscribers.push(subscriber);\n\n  return function unsubscribe() {\n    log<undefined, { subscriber: string }>(\n      publication.config,\n      \"unsubscribe\",\n      undefined,\n      {\n        subscriber: subscriber.name,\n      }\n    );\n\n    const index = subscribers.indexOf(subscriber);\n\n    if (index > -1) {\n      subscribers.splice(index, 1);\n    }\n  };\n};\n"],
  "mappings": ";;;AAkEA,IAAM,MAAM,SACV,QACA,QACA,MACA,MAAgB;;AAEhB,MAAI,WAAM,QAAN,WAAM,SAAA,SAAN,OAAQ,eAAe;AACzB,QAAM,OAAoB,EAAE,cAAa,KAAA,OAAO,UAAI,QAAA,OAAA,SAAA,KAAI,WAAW,OAAM;AAEzE,QAAI,MAAM;AACR,WAAK,OAAO;;AAGd,QAAI,MAAM;AACR,WAAK,OAAO;;AAGd,YAAQ,IAAI,QAAQ,IAAI;;AAE5B;AAQO,IAAM,oBAAoB,SAC/B,QAA6B;AAE7B,MAAM,cAA+B;IACnC;IACA,aAAa,CAAA;;AAGf,MAAI,QAAQ,UAAU,MAAS;AAE/B,SAAO;AACT;AAQO,IAAM,UAAU,SAAI,aAA8B,MAAO;AAC9D,MAAkB,YAAY,QAAQ,WAAW,MAAM,MAAS;AAEhE,WAAyB,KAAA,GAAA,KAAA,YAAY,aAAZ,KAAA,GAAA,QAAA,MAAyB;AAA7C,QAAM,aAAU,GAAA,EAAA;AACnB,QAA+B,YAAY,QAAQ,UAAU,MAAM;MACjE,YAAY,WAAW;KACxB;AAED,eAAW,IAAI;;AAEnB;AAUO,IAAM,YAAY,SACvB,aACA,YAA0B;AAE1B,MACE,YAAY,QACZ,aACA,QACA;IACE,YAAY,WAAW;GACxB;AAGK,MAAA,cAAgB,YAAW;AAEnC,cAAY,KAAK,UAAU;AAE3B,SAAO,SAAS,cAAW;AACzB,QACE,YAAY,QACZ,eACA,QACA;MACE,YAAY,WAAW;KACxB;AAGH,QAAM,QAAQ,YAAY,QAAQ,UAAU;AAE5C,QAAI,QAAQ,IAAI;AACd,kBAAY,OAAO,OAAO,CAAC;;EAE/B;AACF;",
  "names": []
}
